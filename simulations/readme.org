#+TITLE: Load Balancing Simulations
#+AUTHOR: Adam Schwartz
#+DATE: November 11, 2017
#+OPTIONS: ':true *:true toc:nil num:nil

* IPython Notebook
The IPython notebook contains my initial environment for exploring
various load balancing strategies. I recommend that you set up a
python virtual environment and install the python dependencies.

All you need is =IPython=, =numpy=, and =matplotlib=, but you can also
grab everything from running:
#+BEGIN_SRC text
pip install -r requirements.txt
#+END_SRC

After that, the notebook can be launched in the browser with the following command:
#+BEGIN_SRC text
jupyter notebook experimens.ipynb
#+END_SRC

* Nginx and Apache Bench
This is the main simulation. It uses Nginx as a reverse proxy to
balance the load of incoming requests between multiple instances of my
Golang web application. Once everything is running, Apache Bench
(/ab/) is used benchmark the overall latency of the various load
balancing algorithms.

** nginx.conf
We have one =nginx.conf= for each load balancing strategy we are
testing: random, round-robin, two-choices, and least_conn.

There are also multiple Nginx configurations defined for testing the
effects of increasing available servers.

** app.go
We can launch as many servers as we would like to use from a single binary.

** ab
Apache Bench can be used to generate a csv containing the latency data
from each request:
#+BEGIN_SRC text
ab -n 100 -c 10 -g data.tsv http://127.0.0.1:8080/
#+END_SRC

** gnuplot
There are two =gnuplot= scripts for plotting the data from =ab=.
#+BEGIN_SRC text
# gnuplot plots/lines.gnuplot
# gnuplot plots/points.gnuplot
#+END_SRC

** setup.sh
All of this information is configured in =setup.sh=, which will handle
the entire simulation process.
#+BEGIN_SRC text
./setup.sh
#+END_SRC
