#+TITLE: Load Balancing Simulations
#+AUTHOR: Adam Schwartz
#+DATE: November 11, 2017
#+OPTIONS: ':true *:true toc:nil num:nil

* IPython Notebook
The IPython notebook contains my initial environment for exploring
various load balancing strategies. I recommend that you set up a
python virtual environment and install the python dependencies.

All you need is =IPython=, =numpy=, and =matplotlib=, but you can also
grab everything from running:
#+BEGIN_SRC text
pip install -r requirements.txt
#+END_SRC

After that, the notebook can be launched in the browser with the following command:
#+BEGIN_SRC text
jupyter notebook experiments.ipynb
#+END_SRC

* Nginx and Apache Bench
This is the main simulation. It uses Nginx as a reverse proxy to
balance the load of incoming requests between multiple instances of my
Golang web application. Once everything is running, Apache Bench
(/ab/) is used benchmark the overall latency of the various load
balancing algorithms.

** nginx.conf
There is one =nginx.conf= for each load balancing strategy we are
testing: random, round-robin, two-choices, and least_conn.

There are also multiple Nginx configurations defined for testing the
effects of increasing available servers.

** app.go
You can launch as many servers as you need from a single binary. See [[file:~/Documents/Earlham/Earlham%202018/Fall%20Semester/Senior%20Capstone/repository/capstone/src/server/][app.go source]].

** ab
Apache Bench can be used to generate a tsv containing the latency data
from each request:
#+BEGIN_SRC text
ab -n 100 -c 10 -g data.tsv http://127.0.0.1:8080/
#+END_SRC

The script =get_data.sh= will gather benchmarking data for a specific
load balancing algorithm, launch the webservers, and configure Nginx.

#+BEGIN_SRC text
./get_data.sh <random|round_robin|least_conn|two_choices|control> <servers: 1..8> <requests> <concurrent>
#+END_SRC

#+BEGIN_SRC text
# output from running get_data.sh
simulations/
├── ab_data
    ├── control
    |   └── control.tsv
    ├── round_robin
    |   └── round_robin.tsv
    ├── least_conn
    |   └── least_conn.tsv
    ├── random
    |   └── random.tsv
    └── two_choices.tsv
        └── two_choices.tsv
#+END_SRC

** gnuplot
The =make_plot.sh= script uses gnuplot to create a single graph
comparing the performance of all Nginx load balancing algorithms. The
script depends on having a collection of tsv's already generated in
the appropriate directories (i.e., run =get_data.sh= first).

#+BEGIN_SRC text
# server and request information needed to write the title and axis labels
/make_plot.sh <servers> <requests> <concurrency>
#+END_SRC
